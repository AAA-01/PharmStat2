import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from analyzer import analyze_groups

st.set_page_config(page_title="–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", layout="wide")

st.title("üìä –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª", type=["xlsx", "xls"])

if uploaded_file:
    df = pd.read_excel(uploaded_file)
    st.write("### üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
    st.dataframe(df.head())

    # üîπ –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≤—ã–±–æ—Ä–æ–∫
    sample_type = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—ã–±–æ—Ä–æ–∫:",
        ["–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", "–ó–∞–≤–∏—Å–∏–º—ã–µ (–ø–∞—Ä–Ω—ã–µ)"]
    )
    paired = True if sample_type == "–ó–∞–≤–∏—Å–∏–º—ã–µ (–ø–∞—Ä–Ω—ã–µ)" else False

    # üîπ –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
    alpha = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ (alpha):",
        [0.01, 0.025, 0.05, 0.1],
        index=2  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.05
    )

    # üîπ –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –≤—ã–±–æ—Ä—É alpha
    st.markdown("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏:**")
    if alpha == 0.05:
        st.info("üîπ –°—Ç–∞–Ω–¥–∞—Ä—Ç –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ –Ω–∞—É–∫. –û–±—â–µ–ø—Ä–∏–Ω—è—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n"
                "–°–º.: [ICH E9 Statistical Principles](https://www.ich.org/page/efficacy-guidelines)")
    elif alpha == 0.025:
        st.info("üîπ –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –±–∏–æ—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏ (–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Ç–µ—Å—Ç—ã, 90% –î–ò).\n"
                "–°–º.: [EMA Bioequivalence Guideline](https://www.ema.europa.eu/en/documents/scientific-guideline/guideline-investigation-bioequivalence_en.pdf)")
    elif alpha == 0.01:
        st.warning("üîπ –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –ø–æ—Ä–æ–≥, —Ç–∏–ø–∏—á–Ω—ã–π –¥–ª—è —Ñ–∞—Ä–º-–∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.\n"
                   "–°–º.: [FDA Process Validation Guidance 2011](https://www.fda.gov/media/71021/download)")
    elif alpha == 0.1:
        st.info("üîπ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–ª—è—Ö. –í —Ñ–∞—Ä–º–µ –ø–æ—á—Ç–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è.")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≥—Ä—É–ø–ø
    groups = [df[col].dropna().tolist() for col in df.columns]

    try:
        result = analyze_groups(groups, paired=paired, alpha=alpha)

        st.write("## üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        st.write(f"**–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç:** {result['test_used']}")
        st.write(f"**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** {result['statistic']:.4f}")
        st.write(f"**p-value:** {result['p_value']:.4f}")
        st.write(f"**Alpha (—É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏):** {result['alpha']}")
        st.write(f"**p-–∑–Ω–∞—á–µ–Ω–∏—è –®–∞–ø–∏—Ä–æ‚Äì–£–∏–ª–∫–∞:** {result['shapiro_p']}")
        if result['levene_p'] is not None:
            st.write(f"**p-–∑–Ω–∞—á–µ–Ω–∏–µ –õ–µ–≤–µ–Ω–∞:** {result['levene_p']:.4f}")

        # üîé –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥
        if result['p_value'] < alpha:
            st.success("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã–µ —Ä–∞–∑–ª–∏—á–∏—è (p < alpha).")
        else:
            st.info("‚ÑπÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã—Ö —Ä–∞–∑–ª–∏—á–∏–π –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ (p ‚â• alpha).")

        # üìë –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º
        st.write("### üìë –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º (–¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)")
        for i, summary in enumerate(result['group_summary'], start=1):
            st.write(f"**–ì—Ä—É–ø–ø–∞ {i}:** "
                     f"n={summary['n']}, "
                     f"—Å—Ä–µ–¥–Ω–µ–µ={summary['mean']:.4f}, "
                     f"std={summary['std']:.4f}, "
                     f"–º–µ–¥–∏–∞–Ω–∞={summary['median']:.4f}, "
                     f"IQR={summary['iqr']:.4f}, "
                     f"–¥–∏—Å–ø–µ—Ä—Å–∏—è={summary['var']:.4f}")

        # === –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ===
        st.write("## üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")

        # üì¶ Boxplot
        st.subheader("Boxplot (—è—â–∏–∫ —Å —É—Å–∞–º–∏)")
        fig, ax = plt.subplots()
        df.boxplot(ax=ax)
        st.pyplot(fig)


        # üìä Density plot
        st.subheader("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π (KDE)")
        fig, ax = plt.subplots()
        for col in df.columns:
            sns.kdeplot(df[col].dropna(), label=col, fill=True, ax=ax)
        ax.legend()
        st.pyplot(fig)


    except ValueError as e:
        st.error(str(e))
